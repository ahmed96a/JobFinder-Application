using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using DataAccessLayer;

namespace WebAPI.Controllers
{
    [Authorize(Roles = "SuperAdmin,Admin")]
    public class CategoriesController : ApiController
    {
        //----------------------------------

        // 1- db.Configuration.ProxyCreationEnabled = false;
        //    Disable creating of EF proxy entities (that support lazy loading) that wraps the POCO Entity (in that case Category Object) in that action method {see EF dynamic proxies note}.

        // 2- The Code of the actions of that class is different in style from the code of the actions of JobsController.

        //----------------------------------

        private JobFinderDbContext db = new JobFinderDbContext();

        [AllowAnonymous]
        public IHttpActionResult GetCategories()
        {
            try
            {
                return Ok(db.Categories.ToList());
            }
            catch(Exception ex)
            {
                return BadRequest(ex.Message);
            }                          
        }


        // To know why we comment the Route attribute, see {Web API - 405 - The requested resource does not support http method 'PUT'} Note.
        // [Route("api/Categories/{id}", Name = "GetCategoryById")] //add that Route attribute and specify template (parameter) and Name (Parameter, we should specify the template parameter) to use it in the createCategory action method (to specify the location of the newly created object).
        [AllowAnonymous]
        public IHttpActionResult GetCategory(int id)
        {
            try
            {
                var category = db.Categories.Find(id);
                if (category == null)
                {
                    return NotFound();  //return Content(HttpStatusCode.NotFound, "There is No Category with this id : " + id + ".");
                }
                return Ok(category);
            }
            catch(Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }


        [HttpPost]
        public IHttpActionResult CreateCategory([FromBody]Category cat)
        {
            try
            {
                if(!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }
                
                db.Categories.Add(cat);
                db.SaveChanges();
                return CreatedAtRoute("DefaultApi", new { id = cat.Id }, cat);

                // we didn't pass an id in the cat data, but when we add the cat object to the database {db.SaveChanges()}, it get the id value that is autogenerated by the sql server.
                //var location = Request.RequestUri + "/" + cat.Id.ToString();                //return Created(location, cat);                
            }
            catch(Exception ex)
            {                
                return BadRequest(ex.Message);  //return Content(HttpStatusCode.BadRequest, ex);                
            }
        }


        [HttpPut]
        public IHttpActionResult EditCategory([FromBody]Category cat)
        {
            try
            {                
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }
                
                var category = db.Categories.Find(cat.Id);

                if(category == null)
                {
                    return NotFound();                   //return Content(HttpStatusCode.NotFound, "Category with Id " + id.ToString() + " not found to update");
                }
                else
                {                        
                    category.CategoryName = cat.CategoryName;
                    category.CategoryDescription = cat.CategoryDescription;
                    db.SaveChanges();

                    return Ok(category);
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);                //return Content(HttpStatusCode.BadRequest, ex);
            }
        }


        [HttpDelete]
        public IHttpActionResult DeleteCategory(int id)
        {
            try
            {                
                var category = db.Categories.Find(id);

                if (category == null)
                {
                    return NotFound();      //return Content(HttpStatusCode.NotFound, "Category with Id " + id.ToString() + " not found to delete");
                }
                    
                db.Categories.Remove(category);
                db.SaveChanges();
                return Ok();
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);                //return Content(HttpStatusCode.BadRequest, ex);
            }
        }


        protected override void Dispose(bool disposing)
        {
            if(disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

    }
}
